"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitRgbAndAlpha = exports.recombineRgbAndAlpha = exports.isRgbByte = exports.isAlphaByte = exports.countBytesForNRgbBytes = void 0;
// const { BYTE_SIZE } = require('./defaults')
var defaults_1 = require("./defaults");
var CHANNEL_COUNT = ['r', 'g', 'b', 'a'].length;
var countBytesForNRgbBytes = function (n) { return Math.floor((n * defaults_1.BYTE_SIZE * CHANNEL_COUNT) / (CHANNEL_COUNT - 1)); };
exports.countBytesForNRgbBytes = countBytesForNRgbBytes;
var isAlphaByte = function (_, i) { return !((i + 1) % CHANNEL_COUNT); };
exports.isAlphaByte = isAlphaByte;
var isRgbByte = function (_, i) { return (i + 1) % CHANNEL_COUNT; };
exports.isRgbByte = isRgbByte;
var recombineRgbAndAlpha = function (rgb, alpha) {
    return Buffer.from(Array(rgb.length + alpha.length)
        .fill(null)
        .map(function (_, i) { return ((i + 1) % CHANNEL_COUNT ? rgb[i - Math.floor(i / CHANNEL_COUNT)] : alpha[i % CHANNEL_COUNT]); }));
};
exports.recombineRgbAndAlpha = recombineRgbAndAlpha;
var splitRgbAndAlpha = function (data) {
    var rgbBytes = data.filter(exports.isRgbByte);
    var alphaBytes = data.filter(exports.isAlphaByte);
    return [rgbBytes, alphaBytes];
};
exports.splitRgbAndAlpha = splitRgbAndAlpha;
